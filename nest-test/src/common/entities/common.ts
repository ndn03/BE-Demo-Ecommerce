/**
 * üèóÔ∏è **Common Entity Base Classes - Reusable audit v√† tracking patterns**
 *
 * **File Purpose:** ƒê·ªãnh nghƒ©a c√°c base class cho audit trail v√† data tracking
 *
 * **Architecture Pattern:** Composition-based inheritance hierarchy
 *
 * **Available Base Classes:**
 * 1. `PersonEntity` - User action tracking (creator/editor)
 * 2. `TrackingWithoutSoftDeleteEntity` - Timestamp tracking only
 * 3. `TrackingEntity` - Timestamp + soft delete
 * 4. `PersonWithTrackingEntity` - Full audit + soft delete
 * 5. `PersonWithTrackingWithoutSoftDeleteEntity` - Full audit without soft delete
 *
 * **Usage Guide:**
 * - Extend `PersonEntity` - Ch·ªâ c·∫ßn track user actions
 * - Extend `TrackingWithoutSoftDeleteEntity` - Ch·ªâ c·∫ßn timestamp
 * - Extend `TrackingEntity` - C·∫ßn timestamp + soft delete
 * - Extend `PersonWithTrackingEntity` - C·∫ßn full audit + soft delete (most common)
 * - Extend `PersonWithTrackingWithoutSoftDeleteEntity` - C·∫ßn full audit, hard delete
 */

// TODO: Update the import path below if the User entity is located elsewhere
import { User } from 'src/entities/user.entity';
import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  JoinColumn,
  ManyToOne,
  UpdateDateColumn,
} from 'typeorm';

/**
 * üë§ **PersonEntity - Base class cho audit tracking user actions**
 *
 * **Ch·ª©c nƒÉng:** Track ai t·∫°o v√† ai ch·ªânh s·ª≠a entity
 *
 * **Fields included:**
 * - `creatorId: number` - ID c·ªßa user t·∫°o record
 * - `creator: User` - Relation ƒë·∫øn User entity (ng∆∞·ªùi t·∫°o)
 * - `editorId: number` - ID c·ªßa user ch·ªânh s·ª≠a record l·∫ßn cu·ªëi
 * - `editor: User` - Relation ƒë·∫øn User entity (ng∆∞·ªùi ch·ªânh s·ª≠a cu·ªëi)
 *
 * **Database Relations:**
 * - ManyToOne v·ªõi User entity cho creator
 * - ManyToOne v·ªõi User entity cho editor
 * - onDelete: 'SET NULL' - Kh√¥ng x√≥a record khi user b·ªã x√≥a
 *
 * **Use Cases:**
 * - Audit logging cho t·∫•t c·∫£ entity c·∫ßn track user actions
 * - Compliance v√† security tracking
 * - Business logic c·∫ßn bi·∫øt ai th·ª±c hi·ªán thao t√°c
 */
export class PersonEntity {
  @Column({ type: 'int', nullable: true })
  creatorId: number; // ID ng∆∞·ªùi t·∫°o record

  @ManyToOne((): typeof User => User, {
    nullable: true,
    onDelete: 'SET NULL', // Gi·ªØ record khi user b·ªã x√≥a
    onUpdate: 'SET NULL',
  })
  @JoinColumn({ name: 'creatorId' })
  creator: User; // Relation ƒë·∫øn User entity (ng∆∞·ªùi t·∫°o)

  @Column({ type: 'int', nullable: true })
  editorId: number; // ID ng∆∞·ªùi ch·ªânh s·ª≠a l·∫ßn cu·ªëi

  @ManyToOne(() => User, {
    nullable: true,
    onDelete: 'SET NULL', // Gi·ªØ record khi user b·ªã x√≥a
    onUpdate: 'SET NULL',
  })
  @JoinColumn({ name: 'editorId' })
  editor: User; // Relation ƒë·∫øn User entity (ng∆∞·ªùi ch·ªânh s·ª≠a cu·ªëi)
}

/**
 * ‚è∞ **TrackingWithoutSoftDeleteEntity - Base class cho timestamp tracking**
 *
 * **Ch·ª©c nƒÉng:** Track th·ªùi gian t·∫°o v√† c·∫≠p nh·∫≠t record (kh√¥ng c√≥ soft delete)
 *
 * **Fields included:**
 * - `updatedAt: Date` - Timestamp l·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng
 * - `createdAt: Date` - Timestamp khi record ƒë∆∞·ª£c t·∫°o
 *
 * **Database Features:**
 * - Auto-update updatedAt khi record thay ƒë·ªïi
 * - Auto-set createdAt khi record ƒë∆∞·ª£c t·∫°o
 * - Precision 6 microseconds cho timestamp
 *
 * **Use Cases:**
 * - Entity kh√¥ng c·∫ßn soft delete
 * - Simple audit trail ch·ªâ c·∫ßn timestamp
 * - Performance-critical tables kh√¥ng c·∫ßn full audit
 */
export class TrackingWithoutSoftDeleteEntity {
  @UpdateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)',
    onUpdate: 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông update khi record thay ƒë·ªïi
  })
  updatedAt: Date; // Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng

  @CreateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông set khi t·∫°o record
  })
  createdAt: Date; // Th·ªùi gian t·∫°o record
}

/**
 * üóëÔ∏è **TrackingEntity - Base class cho timestamp tracking v·ªõi soft delete**
 *
 * **Ch·ª©c nƒÉng:** Extends TrackingWithoutSoftDeleteEntity + th√™m soft delete capability
 *
 * **Fields included:**
 * - `updatedAt: Date` - (inherited) Timestamp l·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng
 * - `createdAt: Date` - (inherited) Timestamp khi record ƒë∆∞·ª£c t·∫°o
 * - `deletedAt?: Date` - Timestamp khi record b·ªã soft delete (null = ch∆∞a x√≥a)
 *
 * **Soft Delete Features:**
 * - Record kh√¥ng b·ªã x√≥a v·∫≠t l√Ω kh·ªèi database
 * - Set deletedAt timestamp khi "x√≥a"
 * - TypeORM t·ª± ƒë·ªông filter record c√≥ deletedAt != null
 *
 * **Use Cases:**
 * - Entity c·∫ßn kh√¥i ph·ª•c sau khi x√≥a
 * - Audit trail y√™u c·∫ßu gi·ªØ l·∫°i data
 * - Business logic c·∫ßn access deleted records
 */
export class TrackingEntity extends TrackingWithoutSoftDeleteEntity {
  @DeleteDateColumn({ type: 'timestamp', nullable: true, default: null })
  deletedAt?: Date; // Timestamp soft delete (null = ch∆∞a x√≥a)
}
/**
 * üë§‚è∞üóëÔ∏è **PersonWithTrackingEntity - Full audit tracking v·ªõi soft delete**
 *
 * **Ch·ª©c nƒÉng:** K·∫øt h·ª£p PersonEntity + timestamp tracking + soft delete
 *
 * **Fields included:**
 * - `creatorId: number` - (inherited) ID ng∆∞·ªùi t·∫°o record
 * - `creator: User` - (inherited) Relation ƒë·∫øn User entity (ng∆∞·ªùi t·∫°o)
 * - `editorId: number` - (inherited) ID ng∆∞·ªùi ch·ªânh s·ª≠a l·∫ßn cu·ªëi
 * - `editor: User` - (inherited) Relation ƒë·∫øn User entity (ng∆∞·ªùi ch·ªânh s·ª≠a cu·ªëi)
 * - `deletedAt?: Date` - Timestamp soft delete (null = ch∆∞a x√≥a)
 * - `updatedAt: Date` - Timestamp l·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng
 * - `createdAt: Date` - Timestamp khi record ƒë∆∞·ª£c t·∫°o
 *
 * **Complete Audit Features:**
 * - User tracking (ai t·∫°o, ai s·ª≠a)
 * - Timestamp tracking (khi t·∫°o, khi s·ª≠a)
 * - Soft delete (khi x√≥a, c√≥ th·ªÉ kh√¥i ph·ª•c)
 *
 * **Use Cases:**
 * - Entity y√™u c·∫ßu full audit trail
 * - Business-critical data c·∫ßn track ƒë·∫ßy ƒë·ªß
 * - Compliance requirements cao
 * - Entity c√≥ workflow ph·ª©c t·∫°p
 */
export class PersonWithTrackingEntity extends PersonEntity {
  @DeleteDateColumn({ type: 'timestamp', nullable: true, default: null })
  deletedAt?: Date; // Timestamp soft delete (null = ch∆∞a x√≥a)

  @UpdateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)',
    onUpdate: 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông update khi record thay ƒë·ªïi
  })
  updatedAt: Date; // Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng

  @CreateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông set khi t·∫°o record
  })
  createdAt: Date; // Th·ªùi gian t·∫°o record
}

/**
 * üë§‚è∞ **PersonWithTrackingWithoutSoftDeleteEntity - Full audit kh√¥ng soft delete**
 *
 * **Ch·ª©c nƒÉng:** K·∫øt h·ª£p PersonEntity + timestamp tracking (kh√¥ng c√≥ soft delete)
 *
 * **Fields included:**
 * - `creatorId: number` - (inherited) ID ng∆∞·ªùi t·∫°o record
 * - `creator: User` - (inherited) Relation ƒë·∫øn User entity (ng∆∞·ªùi t·∫°o)
 * - `editorId: number` - (inherited) ID ng∆∞·ªùi ch·ªânh s·ª≠a l·∫ßn cu·ªëi
 * - `editor: User` - (inherited) Relation ƒë·∫øn User entity (ng∆∞·ªùi ch·ªânh s·ª≠a cu·ªëi)
 * - `updatedAt: Date` - Timestamp l·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng
 * - `createdAt: Date` - Timestamp khi record ƒë∆∞·ª£c t·∫°o
 *
 * **Audit Features:**
 * - User tracking (ai t·∫°o, ai s·ª≠a)
 * - Timestamp tracking (khi t·∫°o, khi s·ª≠a)
 * - Hard delete (record b·ªã x√≥a vƒ©nh vi·ªÖn)
 *
 * **Use Cases:**
 * - Entity c·∫ßn audit nh∆∞ng kh√¥ng c·∫ßn kh√¥i ph·ª•c
 * - Data c√≥ lifecycle ng·∫Øn
 * - Performance requirements cao (kh√¥ng c·∫ßn soft delete overhead)
 * - Storage constraints (kh√¥ng mu·ªën gi·ªØ deleted records)
 */
export class PersonWithTrackingWithoutSoftDeleteEntity extends PersonEntity {
  @UpdateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)',
    onUpdate: 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông update khi record thay ƒë·ªïi
  })
  updatedAt: Date; // Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng

  @CreateDateColumn({
    type: 'timestamp',
    nullable: false,
    default: () => 'CURRENT_TIMESTAMP(6)', // T·ª± ƒë·ªông set khi t·∫°o record
  })
  createdAt: Date; // Th·ªùi gian t·∫°o record
}
