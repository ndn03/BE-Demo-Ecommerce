import {
  CallHandler,
  ExecutionContext,
  Inject,
  mixin,
  NestInterceptor,
  Optional,
  Type,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import FastifyMulter from 'fastify-multer';
import { Options } from 'multer';
import { Observable } from 'rxjs';

// Ki·ªÉu cho middleware function tr·∫£ v·ªÅ t·ª´ c√°c method c·ªßa multer
type MulterMiddleware = (
  req: any,
  res: any,
  callback: (error?: unknown) => void,
) => void;

// Ki·ªÉu c·ª• th·ªÉ h∆°n cho MulterInstance
interface MulterInstance {
  fields(fields: { name: string; maxCount?: number }[]): MulterMiddleware;
  array(fieldName: string, maxCount?: number): MulterMiddleware;
  single(fieldName: string): MulterMiddleware;
  any(): MulterMiddleware;
}

// Type for request with files
interface RequestWithFiles {
  body: Record<string, unknown>;
  files?: Record<string, Express.Multer.File[]>;
  file?: Express.Multer.File | Record<string, Express.Multer.File[]>;
  builtinFiles?: Record<string, Express.Multer.File[]>;
}

/**
 * Interceptor custom ƒë·ªÉ x·ª≠ l√Ω upload file v·ªõi Fastify + Multer.
 *
 * @param fieldConfigs - C·∫•u h√¨nh c√°c field upload (vd: [{ name: 'image' }, { name: 'subImages', maxCount: 5 }]).
 * @param localOptions - C·∫•u h√¨nh cho Multer (vd: gi·ªõi h·∫°n dung l∆∞·ª£ng, filter lo·∫°i file).
 *
 * Ch·ª©c nƒÉng:
 * - Cho ph√©p upload nhi·ªÅu field trong m·ªôt request (image, subImages, ...).
 * - Merge option to√†n c·ª•c v√† option c·ª•c b·ªô khi kh·ªüi t·∫°o Multer.
 * - X·ª≠ l√Ω l·ªói upload v√† tr·∫£ v·ªÅ BadRequestException v·ªõi message r√µ r√†ng.
 * - Chu·∫©n h√≥a l·∫°i `req.files` v√† ·∫©n n√≥ kh·ªèi validation pipe (tr√°nh recursion ho·∫∑c r√≤ r·ªâ th√¥ng tin).
 * - ƒê·∫£m b·∫£o c√°c field non-file (DTO) ƒë∆∞·ª£c truy·ªÅn qua controller.
 */
export function FastifyFilesMultipleFieldInterceptor(
  fieldConfigs: { name: string; maxCount?: number }[],
  localOptions: Options = {},
) {
  class MixinInterceptor implements NestInterceptor {
    protected multer: MulterInstance;
    private readonly logger = new Logger(MixinInterceptor.name);

    constructor(
      @Optional()
      @Inject('MULTER_MODULE_OPTIONS')
      options: Options = {},
    ) {
      // ƒê·ªãnh nghƒ©a type an to√†n cho FastifyMulter
      type FastifyMulterType = (options: Options) => MulterInstance;

      // Make sure we use memory storage for processing files
      const mergedOptions = {
        ...options,
        ...localOptions,
      };

      // Log options for debugging
      this.logger.debug('üîß Multer options configured');

      // Create multer instance
      const multerInstance = (FastifyMulter as unknown as FastifyMulterType)(
        mergedOptions,
      );

      this.multer = multerInstance;
    }

    async intercept(
      context: ExecutionContext,
      next: CallHandler<any>,
    ): Promise<Observable<any>> {
      const ctx = context.switchToHttp();
      const req = ctx.getRequest<RequestWithFiles>();
      const res = ctx.getResponse<unknown>(); // Log incoming request headers for debugging
      // Gi·∫£i th√≠ch: Ghi log header ƒë·ªÉ ki·ªÉm tra content-type v√† c√°c th√¥ng tin kh√°c, gi√∫p debug v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn request.

      // Validate fieldConfigs
      // Gi·∫£i th√≠ch: Ki·ªÉm tra fieldConfigs ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng r·ªóng, tr√°nh l·ªói khi multer parse request.
      if (!fieldConfigs || fieldConfigs.length === 0) {
        this.logger.error('Ch∆∞a c·∫•u h√¨nh field upload n√†o');
        throw new BadRequestException('Ch∆∞a c·∫•u h√¨nh field upload n√†o');
      }
      // Convert fieldConfigs to multer format
      const multerFields = fieldConfigs.map(({ name, maxCount }) => ({
        name,
        maxCount,
      }));

      // Verify content type for multipart data (crucial for file uploads)
      // We'll use the request object we already have instead of creating a new one

      // Parse multipart form data with multer
      // Gi·∫£i th√≠ch: S·ª≠ d·ª•ng multer.fields ƒë·ªÉ parse c√°c field file ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong fieldConfigs.
      // C√°c field non-file (DTO) ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u v√†o req.body.
      try {
        await new Promise<void>((resolve, reject) => {
          this.multer.fields(multerFields)(req, res, (error: unknown) => {
            if (error) {
              // Chuy·ªÉn l·ªói Multer th√†nh BadRequestException
              // Gi·∫£i th√≠ch: X·ª≠ l√Ω l·ªói t·ª´ multer, l·∫•y message chi ti·∫øt n·∫øu c√≥, ho·∫∑c d√πng message m·∫∑c ƒë·ªãnh.
              let errorMessage = 'Upload th·∫•t b·∫°i';
              if (error && typeof error === 'object' && 'message' in error) {
                const errorObj = error as { message: unknown };
                errorMessage =
                  typeof errorObj.message === 'string'
                    ? errorObj.message
                    : JSON.stringify(errorObj.message);
              }
              this.logger.error(`‚ùå Multer error: ${errorMessage}`);
              return reject(new BadRequestException(errorMessage));
            }
            // this.logger.debug('‚úÖ Multer parse request th√†nh c√¥ng');
            resolve();
          });
        });
      } catch (error: unknown) {
        this.logger.error('‚ùå Exception during multer processing:', error);
        const errorMessage =
          error instanceof Error ? error.message : 'Unknown error';
        throw new BadRequestException('L·ªói x·ª≠ l√Ω file upload: ' + errorMessage);
      }
      // Trong FastifyFilesMultipleFieldInterceptor
      // Sanitize req.body to remove file fields
      // Log parsed body and files for debugging

      // Sanitize req.body to remove file fields
      // Gi·∫£i th√≠ch: Lo·∫°i b·ªè c√°c field file (image, subImages) kh·ªèi req.body ƒë·ªÉ tr√°nh ValidationPipe l·ªói.
      if (req.body) {
        fieldConfigs.forEach(({ name }) => {
          if (name in req.body) {
            delete req.body[name];
          }
        });
      }

      // Check if we actually have files
      if (
        !req.files ||
        typeof req.files !== 'object' ||
        Object.keys(req.files).length === 0
      ) {
        this.logger.warn('‚ö†Ô∏è No files detected in the request');
        this.logger.warn(
          '‚ö†Ô∏è Make sure your frontend form is correctly set up with:',
        );
        this.logger.warn(
          '‚ö†Ô∏è - Correct field names matching the interceptor configuration',
        );
        this.logger.warn('‚ö†Ô∏è - enctype="multipart/form-data" for HTML forms');
        this.logger.warn(
          '‚ö†Ô∏è - FormData object with append() for fetch/axios calls',
        );
      }

      // Process files and make them available to the controller
      const nestRequest = context.switchToHttp().getRequest<RequestWithFiles>();

      // Initialize files object if it doesn't exist
      const safeFiles: Record<string, Express.Multer.File[]> = {};

      if (req.files && typeof req.files === 'object') {
        // Process each file field
        for (const key of Object.keys(req.files)) {
          const files = req.files[key];

          if (Array.isArray(files)) {
            safeFiles[key] = files.map((f) => ({
              fieldname: f.fieldname,
              originalname: f.originalname,
              encoding: f.encoding,
              mimetype: f.mimetype,
              size: f.size,
              buffer: f.buffer,
              stream: f.stream,
              destination: f.destination || '',
              filename: f.filename || f.originalname || '',
              path: f.path || '',
            }));
          } else {
            this.logger.warn(`Field ${key} is not an array`);
            safeFiles[key] = [];
          }
        }
      }

      // Log the processed files
      // this.logger.debug(
      //   `üìÇ Processed ${Object.keys(safeFiles).length} file fields`,
      // );

      // Set files in all the places NestJS might look for them
      req.files = safeFiles;

      // These are for NestJS @UploadedFiles() decorator to work
      if (nestRequest) {
        nestRequest.files = safeFiles;

        // This is specifically for the Multer decorator
        nestRequest.file = safeFiles;

        // For built-in support
        nestRequest.builtinFiles = safeFiles;
      } // Log sanitized files
      // Gi·∫£i th√≠ch: Ghi log req.files sau khi chu·∫©n h√≥a ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu cu·ªëi c√πng tr∆∞·ªõc khi truy·ªÅn qua controller.
      // this.logger.debug('üìÇ Files after sanitization:', req.files);

      // Add verbose logging for request object
      // this.logger.debug('üîç Body type:', typeof req.body);
      // this.logger.debug('üîç Files type:', typeof req.files);

      // Ti·∫øp t·ª•c pipeline
      // Gi·∫£i th√≠ch: G·ªçi next.handle() ƒë·ªÉ chuy·ªÉn request sang controller, ƒë·∫£m b·∫£o c·∫£ req.body v√† req.files ƒë∆∞·ª£c gi·ªØ nguy√™n.
      return next.handle();
    }
  }

  // T·∫°o interceptor dynamic b·∫±ng mixin
  return mixin(MixinInterceptor) as Type<NestInterceptor>;
}
