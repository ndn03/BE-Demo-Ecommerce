import {
  Injectable,
  NotFoundException,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, EntityManager } from 'typeorm';
import { validateDto } from '@src/common/utils/validation.util';

// Entities
import { CartEntity } from 'src/entities/cart.entity';
import { CartItemEntity } from 'src/entities/cart-item.entity';
import { User } from '@src/entities/user.entity';
import { VoucherEntity } from '@src/entities/voucher.entity';

// DTOs
import { AddCartDto } from './dto/add-to-cart.dto';
import { UpdateCartDto } from './dto/update.cart.dto';

// Services
import { ProductService } from './../product/product.service';
import { UserService } from 'src/modules/user/user.service';
import { VoucherService } from '../voucher/voucher.service';

// Types
import { ETypeDiscount } from '@src/common/type.common';

/**
 * üõí **Cart Service - Qu·∫£n l√Ω gi·ªè h√†ng**
 *
 * **Ch·ª©c nƒÉng ch√≠nh:**
 * - Th√™m/x√≥a/c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng
 * - √Åp d·ª•ng voucher v·ªõi validation business logic
 * - T√≠nh to√°n t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
 * - Qu·∫£n l√Ω lifecycle c·ªßa cart
 *
 * **Business Rules:**
 * - M·ªói user ch·ªâ c√≥ 1 cart active
 * - CartItem quantity ph·∫£i > 0
 * - Voucher validation (min order, usage limits)
 * - Price calculation v·ªõi discount logic
 */
@Injectable()
export class CartService {
  private readonly logger = new Logger(CartService.name);

  constructor(
    @InjectRepository(CartEntity)
    private readonly cartRepository: Repository<CartEntity>,
    @InjectRepository(CartItemEntity)
    private readonly cartItemRepository: Repository<CartItemEntity>,
    private readonly productService: ProductService,
    private readonly userService: UserService,
    private readonly voucherService: VoucherService,
  ) {}

  /**
   * üõí **Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng**
   *
   * **Lu·ªìng x·ª≠ l√Ω:**
   * 1. Validate input data
   * 2. Get ho·∫∑c t·∫°o cart cho user
   * 3. Validate product availability
   * 4. Check existing item trong cart
   * 5. Add new ho·∫∑c update existing item
   * 6. Recalculate cart total
   *
   * **Business Rules:**
   * - Quantity ph·∫£i > 0
   * - Product ph·∫£i active v√† available
   * - Update quantity n·∫øu product ƒë√£ c√≥ trong cart
   * - Price snapshot t·∫°i th·ªùi ƒëi·ªÉm add
   */
  async addToCart(user: User, addCartDto: AddCartDto): Promise<CartEntity> {
    const validatedDto = await validateDto(addCartDto, AddCartDto);

    if (validatedDto.quantity <= 0) {
      throw new BadRequestException('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0');
    }

    // üõí **PHASE 2: GET CART** - L·∫•y ho·∫∑c t·∫°o cart cho user
    const cart = await this.getOrCreateCart(user);

    // üéØ **PHASE 3: PRODUCT VALIDATION** - Validate s·∫£n ph·∫©m
    const product = await this.productService.findOne(validatedDto.productIds);
    if (!product) {
      throw new NotFoundException(
        `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${validatedDto.productIds}`,
      );
    }
    if (!product.isActive) {
      throw new BadRequestException('S·∫£n ph·∫©m hi·ªán kh√¥ng kh·∫£ d·ª•ng');
    }

    // üì¶ **PHASE 4: CART ITEM HANDLING** - X·ª≠ l√Ω cart item
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç T√¨m existing item trong cart
      let existingItem = cart.items?.find(
        (item) => item.product.id === validatedDto.productIds,
      );

      if (existingItem) {
        // üîÑ **UPDATE EXISTING ITEM** - C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        existingItem.quantity += validatedDto.quantity;
        existingItem.price = product.final_price; // Update price hi·ªán t·∫°i
        await manager.save(CartItemEntity, existingItem);

        this.logger.log(
          `Updated cart item: Product ${validatedDto.productIds}, new quantity: ${existingItem.quantity}`,
        );
      } else {
        // ‚ûï **ADD NEW ITEM** - T·∫°o m·ªõi cart item
        const newItem = manager.create(CartItemEntity, {
          cart: cart,
          product: product,
          quantity: validatedDto.quantity,
          price: product.final_price, // Snapshot price t·∫°i th·ªùi ƒëi·ªÉm add
        });

        const savedItem = await manager.save(CartItemEntity, newItem);
        cart.items = cart.items || [];
        cart.items.push(savedItem);

        this.logger.log(
          `Added new cart item: Product ${validatedDto.productIds}, quantity: ${validatedDto.quantity}`,
        );
      }

      // üí∞ **PHASE 5: RECALCULATE TOTAL** - T√≠nh l·∫°i t·ªïng gi√° tr·ªã
      const updatedCart = await this.recalculateCartTotal(cart, manager);

      this.logger.log(
        `Cart updated for user ${user.id}, new total: ${updatedCart.totalPrice}`,
      );
      return updatedCart;
    });
  }

  /**
   * üõí **L·∫•y ho·∫∑c t·∫°o cart cho user**
   *
   * **Logic:**
   * - T√¨m existing cart c·ªßa user
   * - T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
   * - Load ƒë·∫ßy ƒë·ªß relations (items, products, voucher)
   */
  private async getOrCreateCart(user: User): Promise<CartEntity> {
    // üîç T√¨m existing cart
    let cart = await this.cartRepository.findOne({
      where: { user: { id: user.id } },
      relations: ['items', 'items.product', 'voucher', 'user'],
    });

    // üÜï T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
    if (!cart) {
      cart = this.cartRepository.create({
        user: user,
        items: [],
        totalPrice: 0,
      });
      cart = await this.cartRepository.save(cart);
      this.logger.log(`Created new cart for user ${user.id}`);
    }

    return cart;
  }

  /**
   * üí∞ **T√≠nh l·∫°i t·ªïng gi√° tr·ªã cart**
   *
   * **Logic:**
   * - T√≠nh subtotal t·ª´ t·∫•t c·∫£ items
   * - √Åp d·ª•ng voucher discount (n·∫øu c√≥)
   * - Update cart.totalPrice
   * - Save v√† return updated cart
   */
  private async recalculateCartTotal(
    cart: CartEntity,
    manager?: EntityManager,
  ): Promise<CartEntity> {
    const entityManager = manager || this.cartRepository.manager;

    // üßÆ T√≠nh subtotal t·ª´ t·∫•t c·∫£ cart items
    const subtotal =
      cart.items?.reduce((sum, item) => {
        return sum + item.price * item.quantity;
      }, 0) || 0;

    // üí∞ Start v·ªõi subtotal
    let finalTotal = subtotal;

    // üé´ √Åp d·ª•ng voucher discount n·∫øu c√≥
    if (cart.voucher) {
      finalTotal = await this.applyVoucherDiscount(subtotal, cart.voucher);
    }

    // üíæ Update cart total
    cart.totalPrice = Math.max(0, finalTotal); // Kh√¥ng ƒë·ªÉ √¢m

    const updatedCart = await entityManager.save(CartEntity, cart);
    return updatedCart;
  }

  /**
   * üé´ **√Åp d·ª•ng voucher discount v√†o gi√° ti·ªÅn**
   *
   * **Logic:**
   * - Check voucher c√≥ active kh√¥ng
   * - Check valid date range
   * - Apply percent ho·∫∑c fixed discount
   * - Apply minimum order amount
   */
  private async applyVoucherDiscount(
    subtotal: number,
    voucher: VoucherEntity,
  ): Promise<number> {
    if (!voucher.isActive) {
      this.logger.warn(`Voucher ${voucher.id} is not active`);
      return subtotal;
    }

    // üìÖ Date validation gi·ªù ƒë∆∞·ª£c handle ·ªü VoucherService.checkVoucher()
    // Kh√¥ng c·∫ßn check validFrom/validTo ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ ƒë∆∞·ª£c validate tr∆∞·ªõc ƒë√≥

    // üíµ Check minimum order amount
    if (voucher.min_order_value && subtotal < voucher.min_order_value) {
      this.logger.warn(
        `Order amount ${subtotal} below minimum ${voucher.min_order_value} for voucher ${voucher.id}`,
      );
      return subtotal;
    }

    // üßÆ Calculate discount
    let discount = 0;

    if (
      voucher.discount_type === ETypeDiscount.PERCENTAGE &&
      voucher.value_discount
    ) {
      // üìä Percent discount
      discount = (subtotal * voucher.value_discount) / 100;

      // üß¢ Apply max discount limit
      if (voucher.max_discount_value && discount > voucher.max_discount_value) {
        discount = voucher.max_discount_value;
      }
    } else if (
      voucher.discount_type === ETypeDiscount.AMOUNT &&
      voucher.value_discount
    ) {
      // üí∞ Fixed amount discount
      discount = voucher.value_discount;
    }
    const finalAmount = subtotal - discount;
    this.logger.log(
      `Applied voucher ${voucher.id}: subtotal ${subtotal} - discount ${discount} = ${finalAmount}`,
    );

    return Math.max(0, finalAmount); // Kh√¥ng ƒë·ªÉ √¢m
  }

  async getCartByUser(
    user: User,
  ): Promise<{ cart: CartEntity; totalPrice: number }> {
    let cart = await this.cartRepository.findOne({
      where: { user: { id: user.id } },
      relations: ['items', 'items.product', 'voucher'],
    });

    if (!cart) {
      cart = this.cartRepository.create({ user, items: [] });
      await this.cartRepository.save(cart);
    }

    // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
    const totalPrice =
      cart.items?.reduce((sum, item) => sum + item.price * item.quantity, 0) ||
      0;

    return { cart, totalPrice };
  }

  /**
   * ‚úèÔ∏è **C·∫≠p nh·∫≠t quantity c·ªßa cart item**
   *
   * **Logic:**
   * - T√¨m item trong cart
   * - Update quantity ho·∫∑c remove n·∫øu quantity = 0
   * - Recalculate total
   * - Save v√† return updated cart
   */
  async updateCartItem(
    user: User,
    updateDto: UpdateCartDto,
  ): Promise<CartEntity> {
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç **PHASE 1: GET CART** - L·∫•y cart hi·ªán t·∫°i
      const cart = await this.getOrCreateCart(user);

      // üîé **PHASE 2: FIND ITEM** - T√¨m item c·∫ßn update
      const item = cart.items?.find((item) => item.id === updateDto.itemId);
      if (!item) {
        throw new NotFoundException(
          `Cart item v·ªõi ID ${updateDto.itemId} kh√¥ng t·ªìn t·∫°i`,
        );
      }

      // ‚úèÔ∏è **PHASE 3: UPDATE OR REMOVE** - Update ho·∫∑c remove item
      if (updateDto.quantity <= 0) {
        // üóëÔ∏è Remove item n·∫øu quantity <= 0
        await manager.remove(CartItemEntity, item);
        cart.items = cart.items.filter((i) => i.id !== item.id);
        this.logger.log(`Removed item ${item.id} from cart ${cart.id}`);
      } else {
        // ‚úèÔ∏è Update quantity
        item.quantity = updateDto.quantity;
        await manager.save(CartItemEntity, item);
        this.logger.log(
          `Updated item ${item.id} quantity to ${updateDto.quantity}`,
        );
      }

      // üí∞ **PHASE 4: RECALCULATE TOTAL** - T√≠nh l·∫°i t·ªïng ti·ªÅn
      const updatedCart = await this.recalculateCartTotal(cart, manager);

      this.logger.log(
        `Cart ${cart.id} updated, new total: ${updatedCart.totalPrice}`,
      );
      return updatedCart;
    });
  }

  /**
   * üóëÔ∏è **X√≥a item kh·ªèi cart**
   *
   * **Logic:**
   * - T√¨m v√† remove item
   * - Recalculate total
   * - Return updated cart
   */
  async removeFromCart(user: User, itemId: number): Promise<CartEntity> {
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç **PHASE 1: GET CART** - L·∫•y cart hi·ªán t·∫°i
      const cart = await this.getOrCreateCart(user);

      // üîé **PHASE 2: FIND & REMOVE ITEM** - T√¨m v√† x√≥a item
      const item = cart.items?.find((item) => item.id === itemId);
      if (!item) {
        throw new NotFoundException(`Cart item v·ªõi ID ${itemId} kh√¥ng t·ªìn t·∫°i`);
      }

      await manager.remove(CartItemEntity, item);
      cart.items = cart.items.filter((i) => i.id !== itemId);

      // üí∞ **PHASE 3: RECALCULATE TOTAL** - T√≠nh l·∫°i t·ªïng ti·ªÅn
      const updatedCart = await this.recalculateCartTotal(cart, manager);

      this.logger.log(`Removed item ${itemId} from cart ${cart.id}`);
      return updatedCart;
    });
  }

  /**
   * üßπ **X√≥a to√†n b·ªô cart**
   *
   * **Logic:**
   * - Remove t·∫•t c·∫£ cart items
   * - Reset cart totalPrice = 0
   * - Return empty cart
   */
  async clearCart(user: User): Promise<CartEntity> {
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç **PHASE 1: GET CART** - L·∫•y cart hi·ªán t·∫°i
      const cart = await this.getOrCreateCart(user);

      // üóëÔ∏è **PHASE 2: REMOVE ALL ITEMS** - X√≥a t·∫•t c·∫£ items
      if (cart.items && cart.items.length > 0) {
        await manager.remove(CartItemEntity, cart.items);
        cart.items = [];
      }

      // üí∞ **PHASE 3: RESET TOTAL** - Reset t·ªïng ti·ªÅn
      cart.totalPrice = 0;
      cart.voucher = null; // Remove voucher c≈©

      const clearedCart = await manager.save(CartEntity, cart);
      this.logger.log(`Cleared all items from cart ${cart.id}`);

      return clearedCart;
    });
  }

  /**
   * üé´ **√Åp d·ª•ng voucher v√†o cart**
   *
   * **Logic:**
   * - Validate voucher code
   * - Check voucher conditions
   * - Apply voucher v√† recalculate total
   * - Save updated cart
   */
  async applyVoucher(user: User, voucherCode: string): Promise<CartEntity> {
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç **PHASE 1: GET CART** - L·∫•y cart hi·ªán t·∫°i
      const cart = await this.getOrCreateCart(user);

      if (!cart.items || cart.items.length === 0) {
        throw new BadRequestException(
          'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ √°p d·ª•ng voucher',
        );
      }

      // üîé **PHASE 2: FIND VOUCHER** - T√¨m voucher theo code
      const foundVoucher = await manager.findOne(VoucherEntity, {
        where: { code: voucherCode },
      });

      if (!foundVoucher) {
        throw new NotFoundException(
          `Voucher v·ªõi m√£ ${voucherCode} kh√¥ng t·ªìn t·∫°i`,
        );
      }

      // ‚úÖ **PHASE 3: VALIDATE VOUCHER** - Ki·ªÉm tra ƒëi·ªÅu ki·ªán v√† s·∫£n ph·∫©m
      const productIds = cart.items.map((item) => item.product.id);

      // S·ª≠ d·ª•ng VoucherService.checkVoucher ƒë·ªÉ validate voucher v√† product applicability
      const validatedVoucher = await this.voucherService.checkVoucher(
        foundVoucher.id,
        productIds,
      );

      // üé´ **PHASE 4: APPLY VOUCHER** - √Åp d·ª•ng voucher
      cart.voucher = validatedVoucher;
      const updatedCart = await this.recalculateCartTotal(cart, manager);

      this.logger.log(`Applied voucher ${voucherCode} to cart ${cart.id}`);
      return updatedCart;
    });
  }

  async removeVoucher(user: User): Promise<CartEntity> {
    return await this.cartRepository.manager.transaction(async (manager) => {
      // üîç **PHASE 1: GET CART** - L·∫•y cart hi·ªán t·∫°i
      const cart = await this.getOrCreateCart(user);

      if (!cart.voucher) {
        throw new BadRequestException('Gi·ªè h√†ng ch∆∞a c√≥ m√£ gi·∫£m gi√° n√†o');
      }
      cart.voucher = null;
      const updatedCart = await this.recalculateCartTotal(cart, manager);

      this.logger.log(`Removed voucher from cart ${cart.id}`);
      return updatedCart;
    });
  }

}
